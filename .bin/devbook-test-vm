#!/usr/bin/env zsh

# Set stop on error / enable debug
set -euo pipefail
#set -vx

############################################################################
# DEVBOOK TEST VM FUNCTIONS
############################################################################

##{{{#######################################################################
############################################################################
# FUNCTIONS
############################################################################

# Clean Upon Exit
cleanup() {
  :
}
if [[ "${(%):-%x}" = "$0" ]]; then
  trap cleanup EXIT
fi

# Print a string line wrapped in "===" headers
printline() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
  printf "%s\n" "$1"
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
}

#  Logging functions
readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

# Accept Message & Error Code
quit() {
  if [[ -z $1 ]]; then MESSAGE="An error has occurred"; else MESSAGE=$1; fi
  if [[ -z $2 ]]; then ERROR_CODE=1; else ERROR_CODE=$2; fi
  echo "$MESSAGE" 1>&2; exit "$ERROR_CODE";
}

# Retrieve an Ansible var in playbook.
ansible_var() {
  if [[ ! -z "$1" ]]; then
    VAR="$1"
    echo $(ansible-playbook main.yml -i inventory --tags "get-var" --extra-vars "var_name=$VAR" | grep "$VAR" | sed -e 's/[[:space:]]*"\([^"]*\)"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\2/g' | sed -e "s/\"$VAR\": null//g" | sed -e "s/VARIABLE IS NOT DEFINED!//g" )
  fi
}

############################################################################
# VARS
############################################################################
# Output colors.
C_HIL="\033[36m"
C_WAR="\033[33m"
C_SUC="\033[32m"
C_ERR="\033[31m"
C_RES="\033[0m"

# Defaults
DEVBOOK_VM_NAME="macOS"
DEVBOOK_VM_DIR="$HOME/Documents/VirtualBox/$DEVBOOK_VM_NAME"
DEVBOOK_VM_BACKUP_DIR=""
typeset -A DEVBOOK_VM_SNAPSHOTS
DEVBOOK_VM_SNAPSHOTS[Init]="An initialized macOS High Sierra install with a configured admin user."
DEVBOOK_VM_SNAPSHOTS[Ansibled]="A macOS High Sierra install with ansible & XCode CLI tools installed."
DEVBOOK_VM_SNAPSHOTS[SIPOff]="A macOS High Sierra install ready for DevBook w/ SIP Off."
DEVBOOK_VM_SNAPSHOTS[Packaged]="A macOS High Sierra install with DevBook installed."
DEVBOOK_VM_SSH_HOST="macos"

##}}}#######################################################################

#/ Usage: $SCRIPT OP [ARGS]
#/
#/     <OP>:  [config|control|snapshot|image|backup|time-sync|build]
#/   <ARGS>:  On OP:
#/
#/            config:
#/
#/            control COMMAND:                                         Control the VM:
#/              <COMMAND>:  [on|state|manage|off]
#/                 <ARGS>:
#/                          on:                                        Turn on the VM.
#/                          state [poweroff|savestate|pause|resume]:   Set the VM to specified state.
#/                          manage:                                    Open Virtualbox App.
#/                          off:                                       Turn off the VM.
#/
#/            snapshot COMMAND:                                        Control VM snapshot:
#/              <COMMAND>:  [take|delete|restore|list]
#/                 <ARGS>:
#/                          take NAME:                                 Take a snapshot named NAME.
#/                          delete NAME INDEX:                         Delete the INDEX-th snapshot named NAME.
#/                          restore NAME:                              Restore the snapshot named NAME.
#/                          list:                                      List all VM snapshots.
#/
#/            image:
#/              <COMMAND>:  [mount|umount]
#/                 <ARGS>:
#/                          mount IMAGE:                               Mount the IMAGE iso into the VM.
#/                          umount IMAGE:                              Unmount the IMAGE name out of the VM.
#/
#/            backup:                                                  Backup the VM dir to $DEVBOOK_VM_BACKUP_DIR.
#/
#/            time-sync:                                               Sync the VM clock to the current time.
#/
#/            build:
#/
#/ Examples:
#/ Options:
#/   --help: Display this help message
SCRIPT=$(basename "$0")
usage() { grep '^#/' "$0" | cut -c4- | sed -e 's/\$SCRIPT/'"$SCRIPT"'/g' ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage

############################################################################
# MAIN
############################################################################

# Handle options
# Add options x: - required arg
while getopts 'h' FLAG; do
  case "${FLAG}" in
    h) usage; exit 1 ;;
    *) : ;;
  esac
done

# Verify client
if (! which VBoxManage > /dev/null 2>&1 ); then
  echo "${C_ERR}VirtualBox/VBoxManage is needed. Run ${C_WAR}brew cask install virtualbox${C_RES}${C_ERR} to install.${C_RES}"
  exit 1
else

  # Retrieve & route command
  OP=${1-""}
  case $OP in

    # DEFAULT DEVBOOK VM CONFIG
    config)
      ;;

    # STARTING/CONTROL DEVBOOK VM
    control)
      COMMAND=${2-""}

      case $COMMAND in
        on)
          VBoxManage startvm "$DEVBOOK_VM_NAME" --type gui
          ;;
        state)
          STATE=${3-""}
          VBoxManage controlvm "$DEVBOOK_VM_NAME" $STATE
          ;;
        manage)
          open -a "VirtualBox"
          ;;
        off)
          osascript -e 'quit app "VirtualBox"'
          VBoxManage controlvm "$DEVBOOK_VM_NAME" savestate
          osascript -e 'quit app "VirtualBox"'
          ;;
        *) usage;;
      esac
      ;;

    # SNAPSHOT DEVBOOK VM
    snapshot)
      COMMAND=${2-""}
      SNAPSHOT=${3-""}
      SNAPSHOT_ITEM=${4-""}
      SNAPSHOT_DESC=${DEVBOOK_VM_SNAPSHOTS[$SNAPSHOT]-}
      if [[ "$COMMAND" != "list" && -z "$SNAPSHOT_DESC" ]]; then
        echo "${C_ERR}${C_WAR}$SNAPSHOT${C_RES}${C_ERR} is not a valid snapshot.${C_RES}"
        exit 1
      fi
      if [[ "$SNAPSHOT_ITEM" != "" ]]; then
        UUID=$(VBoxManage snapshot "$DEVBOOK_VM_NAME" list | grep "$SNAPSHOT" | sed -e 's/\ *Name\ *:\ *[[:alpha:]]*\ (UUID:\ \(.*\)).*/\1/g' | sed -n "$SNAPSHOT_ITEM"p)
      else
        UUID=$(VBoxManage snapshot "$DEVBOOK_VM_NAME" list | grep "$SNAPSHOT" | sed -e 's/\ *Name\ *:\ *[[:alpha:]]*\ (UUID:\ \(.*\)).*/\1/g')
      fi

      case $COMMAND in
        take)
          VBoxManage snapshot "$DEVBOOK_VM_NAME" take "$SNAPSHOT" --description "$SNAPSHOT_DESC"
          ;;
        delete)
          #VBoxManage snapshot "$DEVBOOK_VM_NAME" delete "$SNAPSHOT"
          VBoxManage snapshot "$DEVBOOK_VM_NAME" delete "$UUID"
          ;;
        restore)
          VBoxManage controlvm "$DEVBOOK_VM_NAME" poweroff || true
          VBoxManage snapshot "$DEVBOOK_VM_NAME" restore "$SNAPSHOT"
          echo "${C_HIL}Waiting for snapshot restoration...${C_RES}"
          sleep 5
          VBoxManage startvm "$DEVBOOK_VM_NAME" --type gui || true
          ;;
        list)
          VBoxManage snapshot "$DEVBOOK_VM_NAME" list
          ;;
        *) usage;;
      esac
      ;;

    # IMAGE-MOUNT DEVBOOK
    image)
      COMMAND=${2-""}
      IMAGE=${3-""}
      if [[ -z "$IMAGE" ]]; then
        echo "${C_ERR}Need an iso to mount or the image name (to unmount).${C_RES}"
        exit 1
      fi

      case $COMMAND in
        mount)
          VBoxManage storageattach "$DEVBOOK_VM_NAME" --storagectl "SATA" --port 1 --device 0 --type dvddrive --medium "$IMAGE"
          ;;
        umount)
          ssh -t "$DEVBOOK_VM_SSH_HOST" "diskutil eject \"$IMAGE\""
          VBoxManage storageattach "$DEVBOOK_VM_NAME" --storagectl "SATA" --port 1 --device 0 --type dvddrive --medium "emptydrive"
          ;;
        *) usage;;
      esac
      ;;
      ### Make ISO
      #  hdiutil makehybrid -o ~/Downloads/Devbook-Test.iso ~/Downloads/Devbook -iso -joliet
      ### Local manage
      #  hdiutil attach ~/Downloads/Devbook.dmg
      #  diskutil eject Devbook

    # BACKUP DEVBOOK
    backup)
      if [[ -d "${DEVBOOK_VM_BACKUP_DIR:?}/${DEVBOOK_VM_NAME:?}" ]]; then
        rm -rf "${DEVBOOK_VM_BACKUP_DIR:?}/${DEVBOOK_VM_NAME:?}"
      fi
      cp -R "${DEVBOOK_VM_DIR:?}" "${DEVBOOK_VM_BACKUP_DIR:?}"
      ;;

    # RESYNC DEVBOOK CLOCK
    time-sync)
      ssh -t "$DEVBOOK_VM_SSH_HOST" "sudo ntpdate -u time.apple.com"
      ;;

    # BUILD DEVBOOK
    build)
      ;;

    *) usage;;
  esac
fi

exit 0
