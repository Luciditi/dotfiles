#!/usr/bin/env sh

# Set stop on error / enable debug
set -euo pipefail
#set -vx

############################################################################
# DEVBOOK TEST VM FUNCTIONS
############################################################################

##{{{#######################################################################
############################################################################
# FUNCTIONS
############################################################################

# Clean Upon Exit
cleanup() {
  :
}
if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  trap cleanup EXIT
fi

# Print a string line wrapped in "===" headers
printline() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
  printf "%s\n" "$1"
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
}

#  Logging functions
readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $*" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $*" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $*" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $*" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

# Accept Message & Error Code
quit() {
  if [[ -z $1 ]]; then MESSAGE="An error has occurred"; else MESSAGE=$1; fi
  if [[ -z $2 ]]; then ERROR_CODE=1; else ERROR_CODE=$2; fi
  echo "$MESSAGE" 1>&2; exit "$ERROR_CODE";
}

# Retrieve an Ansible var in playbook.
ansible_var() {
  if [[ ! -z "$1" ]]; then
    VAR="$1"
    echo $(ansible-playbook main.yml -i inventory --tags "get-var" --extra-vars "var_name=$VAR" | grep "$VAR" | sed -e 's/[[:space:]]*"\([^"]*\)"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\2/g' | sed -e "s/\"$VAR\": null//g" | sed -e "s/VARIABLE IS NOT DEFINED!//g" )
  fi
}

############################################################################
# VARS
############################################################################
# Output colors.
C_HIL="\033[36m"
C_WAR="\033[33m"
C_SUC="\033[32m"
C_ERR="\033[31m"
C_RES="\033[0m"

# Defaults
DEVBOOK_VM_NAME="macOS"
##}}}#######################################################################

#/ Usage: $SCRIPT OP [ARGS]
#/
#/     <OP>:  [config|control|snapshot|image|backup|time-sync|build]
#/   <ARGS>:  On OP:
#/
#/            config:
#/
#/            control COMMAND:                                         Control the VM:
#/              <COMMAND>:  [on|state|manage|off]
#/                 <ARGS>:
#/                          on:                                        Turn on the VM.
#/                          state [poweroff|savestate|pause|resume]:   Set the VM to specified state.
#/                          manage:                                    Open Virtualbox App
#/                          off:                                       Turn off the VM.
#/
#/            snapshot:
#/
#/            image:
#/
#/            backup:
#/
#/            time-sync:
#/
#/            build:
#/
#/ Examples:
#/ Options:
#/   --help: Display this help message
SCRIPT=$(basename "$0")
usage() { grep '^#/' "$0" | cut -c4- | sed -e 's/\$SCRIPT/'"$SCRIPT"'/g' ; exit 0 ; }
expr "$*" : ".*--help" > /dev/null && usage

############################################################################
# MAIN
############################################################################

# Handle options
# Add options x: - required arg
while getopts 'h' FLAG; do
  case "${FLAG}" in
    h) usage; exit 1 ;;
    *) : ;;
  esac
done

# Verify client
if (! which VBoxManage > /dev/null 2>&1 ); then
  echo "${C_ERR}VirtualBox/VBoxManage is needed. Run ${C_WAR}brew cask install virtualbox${C_RES}${C_ERR} to install.${C_RES}"
  exit 1
else

  # Retrieve & route command
  OP=${1-""}
  case $OP in

    # DEFAULT DEVBOOK VM CONFIG
    config)
      ;;

    # STARTING/CONTROL DEVBOOK VM
    control)
      COMMAND=${2-""}
      case $COMMAND in
        on)
          VBoxManage startvm "$DEVBOOK_VM_NAME" --type gui
          ;;
        state)
          STATE=${3-""}
          VBoxManage controlvm "$DEVBOOK_VM_NAME" $STATE
          ;;
        manage)
          open -a "VirtualBox"
          ;;
        off)
          osascript -e 'quit app "VirtualBox"'
          VBoxManage controlvm "$DEVBOOK_VM_NAME" savestate
          osascript -e 'quit app "VirtualBox"'
          ;;
        *) usage;;
      esac
      ;;

    # SNAPSHOT DEVBOOK VM
    snapshot)
      ;;

    # IMAGE-MOUNT DEVBOOK
    image)
      ;;

    # BACKUP DEVBOOK
    backup)
      ;;

    # RESYNC DEVBOOK CLOCK
    time-sync)
      ;;

    # BUILD DEVBOOK
    build)
      ;;

    *) usage;;
  esac
fi

exit 0
