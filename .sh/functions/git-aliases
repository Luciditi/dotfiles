#!/usr/bin/env bash
##
## git-aliases: Store aliases while in a specific git-dir
##

# Look for an git dir-specific aliases (stored in an .aliases file)
# and restore/cleanup aliases from them
function git-aliases {
  GIT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
  EXIT_CODE=$(echo $?)

  # Look for valid repo
  if [[ $EXIT_CODE == "0" && -d "$GIT_ROOT" ]]; then
    REPO_NAME=$(basename $GIT_ROOT | awk '{print toupper($0)}')

    # Look for valid aliased file
    if [[ -f "$GIT_ROOT/.aliases" ]]; then

      # If alias file has not been set or is a new alias file
      if [[ "$GIT_ALIAS_FILE" != "$GIT_ROOT/.aliases" ]]; then

        # Remove existing aliases when new alias file
        if [[ ! -z "$GIT_ALIAS_FILE" ]]; then
          echo "\033[33mRemoving Git aliases...$GIT_ALIAS_FILE\033[0m"
          git-aliases-clean "$GIT_ALIAS_FILE"
          GIT_ALIAS_FILE=""
        fi

        # Set alias file
        echo "\033[33mSetting $REPO_NAME aliases...\033[0m"
        GIT_ALIAS_FILE="$GIT_ROOT/.aliases"
        git-aliases-build "$GIT_ALIAS_FILE"
      fi

      return 0
    fi
  fi

  if [[ ! -z "$GIT_ALIAS_FILE" ]]; then
    echo "\033[33mRemoving Git aliases...$GIT_ALIAS_FILE\033[0m"
    git-aliases-clean "$GIT_ALIAS_FILE"
    GIT_ALIAS_FILE=""
  fi
}

# Add aliases from file.
#$1 = .aliases file
function git-aliases-build {
  if [[ -f "$1" ]]; then

    ALIAS_FILE="$1"
    EXISTING_ALIASES=$(alias)
    GIT_OLD_ALIASES=""

    while read ALIAS_LINE; do
      ALIAS=$(echo $ALIAS_LINE | sed -E "s/alias ([^=]+)='([^']*)'/\1/g")
      COMMAND=$(echo $ALIAS_LINE | sed -E "s/alias ([^=]+)='([^']*)'/\2/g")
      EXISTING_ALIAS=$(echo $EXISTING_ALIASES | grep "^$ALIAS='[^']*'")
      if [[ ! -z "$EXISTING_ALIAS" ]]; then
        GIT_OLD_ALIASES=$(printf "$GIT_OLD_ALIASES\nalias $EXISTING_ALIAS")
      fi

      alias $ALIAS="echo \"\033[33mGIT-ALIAS:\033[0m $COMMAND\" && $COMMAND"
    done < "$ALIAS_FILE"
  fi
}

# Clean out aliases & restore old ones.
#$1 = .aliases file
function git-aliases-clean {
  if [[ -f "$1" ]]; then

    # Remove aliases in "$1"
    while read ALIAS_LINE; do
      ALIAS=$(echo $ALIAS_LINE | sed -E "s/alias ([^=]+)='([^']*)'/\1/g")
      COMMAND=$(echo $ALIAS_LINE | sed -E "s/alias ([^=]+)='([^']*)'/\2/g")

      ALIAS_CHECK=$(alias "$ALIAS")
      EXIT_CODE=$(echo $?)
      if [[ $EXIT_CODE == "0" ]]; then
        unalias "$ALIAS"
      fi
    done < "$1"

    # Restore old aliases
    if [[ ! -z "$GIT_OLD_ALIASES" ]]; then
      eval "$GIT_OLD_ALIASES"
      unset "$GIT_OLD_ALIASES"
    fi
  fi
}
git-aliases

# EXAMPLE .ALIASES FILE:
# alias my-command='my-in-git-repo-command'
# alias my-command-2='my-in-git-repo-command-2'
